Fennoscandia Studios Backend
This repository contains the backend Python code for Fennoscandia Studios, a platform that leverages facial recognition technology to offer AI-based identity detection. The backend handles user authentication, signup, data encryption, and interaction with the AI model.

Features & Routes:
1. / (Home Page)
Description: Serves the landing page (index.html).
2. /home (Dashboard)
Description: Renders the sidebar page (sidebar.html) after the user logs in.
3. /login (Login Page)
Description: Displays the login form (login.html).
4. /signup (Signup Page)
Description: Displays the signup form (signup.html).
5. /form_signup (Signup Handling)
POST Method: Handles the signup process.
Features:
Checks if the email or username already exists in the data.json database.
Hashes the password with bcrypt and stores the user data (username, email, hashed password).
Saves the updated database into the data.json file.
6. /form_login (Login Handling)
POST Method: Handles the login process.
Features:
Validates the username and password.
Compares the hashed password using bcrypt for secure authentication.
If valid, redirects the user to the lounge page (lounge.html).
7. /run-ai-model (AI Model Execution)
POST Method: Executes the facial recognition AI model using a Jupyter notebook.
Features:
Runs the Jupyter notebook using subprocess and the specified Conda environment (AnacondaOptimised).
Returns a success or error message along with the execution output.

Encryption and Decryption Functions
This backend also includes encryption for sensitive data using Fernet (from the cryptography module), as well as a slow hashing function with PBKDF2 for added security:
Encryption with Fernet:
Encrypt: Encrypts sensitive data (e.g., passwords or other sensitive user data) before saving it to the database.
Decrypt: Decrypts the encrypted data when needed.
Slow Hashing with PBKDF2:
Hashing: Generates a slow hash using PBKDF2, which can be used to securely store cryptographic keys.
Salting: Generates a salt to add an additional layer of security when hashing the data.
Important Code Sections:
1. Setup and Configuration
python
Kopier
import os
import json
import bcrypt
import base64
import subprocess
from flask import Flask, request, render_template, jsonify

app = Flask(__name__)

data_file_path = r'C:\path\to\data.json'

if not os.path.exists(data_file_path):
    with open(data_file_path, "w") as file:
        json.dump({"people": []}, file, indent=4)

2. User Signup and Login
Handles user authentication with bcrypt hashing:
python
Kopier
@app.route('/form_signup', methods=['POST'])
def signup():
    name1 = request.form['username']
    pwd = request.form['password']
    gmail1 = request.form['gmail']
    
    for user in database["people"]:
        if user["gmail"] == gmail1:
            return render_template('signup.html', info='Gmail already in use.')

    # Hashing password using bcrypt
    hashed_pwd = bcrypt.hashpw(pwd.encode('utf-8'), bcrypt.gensalt())
    hashed_pwd_str = base64.urlsafe_b64encode(hashed_pwd).decode('utf-8')
    
    database["people"].append({"username": name1, "password": hashed_pwd_str, "gmail": gmail1})
    
    with open(data_file_path, "w") as file:
        json.dump(database, file, indent=4)
    
    return render_template('login.html', info='Signup successful! Please log in.')

3. AI Model Execution
Runs the AI model in a Jupyter notebook using a Conda environment:
python
Kopier
@app.route('/run-ai-model', methods=['POST'])
def run_ai_model():
    try:
        conda_python = r"C:\path\to\conda\python.exe"
        notebook_path = '"C:\\path\\to\\Kamera AI Model.ipynb"'
        
        command = [
            r"C:\path\to\activate.bat",  # Path to activate.bat
            "AnacondaOptimised",  # Conda environment name
            "&&",  # Ensure next command runs after activation
            conda_python,  # Python executable
            "-m", "jupyter", "nbconvert",  # Convert and execute the notebook
            "--to", "notebook",
            "--execute",
            "--inplace",
            notebook_path  # Path to the notebook
        ]

        result = subprocess.run(" ".join(command), capture_output=True, text=True, check=True, shell=True)
        
        return jsonify({"message": "AI Model executed successfully!", "output": result.stdout}), 200

    except subprocess.CalledProcessError as e:
        return jsonify({"message": "Error executing AI Model.", "error": e.stderr}), 500

4. Encryption and Decryption Functions
python
Kopier
from cryptography.fernet import Fernet
import base64

def load_key():
    return open("crypt_.key", "rb").read()

def save_key_to_():
    key = Fernet.generate_key()
    with open('crypt_.key', 'wb') as crypt_:
        crypt_.write(key)
    return key

def encrypt_data(data):
    key = load_key()
    fernet = Fernet(key)
    encrypted_data = fernet.encrypt(data.encode())
    return base64.urlsafe_b64encode(encrypted_data).decode()

def decrypt_data(encrypted_data):
    key = load_key()
    fernet = Fernet(key)
    encrypted_data = base64.urlsafe_b64decode(encrypted_data)
    decrypted_data = fernet.decrypt(encrypted_data).decode()
    return decrypted_data


Data File (data.json) Example
Hereâ€™s an example of the data.json file, which stores the user data (username, password, email):
json
Kopier
{
    "people": [
        {
            "username": "aidanandino",
            "password": "hashed_password_1",
            "gmail": "aidan@gmail.com"
        },
        {
            "username": "Test1234",
            "password": "hashed_password_2",
            "gmail": "mm@mm.no"
        }
    ]
}


Setup and Installation
Install Flask:

 bash
Kopier
pip install Flask


Install cryptography (for encryption):

 bash
Kopier
pip install cryptography


Run the Flask application:

 bash
Kopier
python app.py



Future Enhancements
Email Verification: Implement email-based verification during signup for added security.
User Roles and Permissions: Extend the application with different user roles (admin, regular user) for more granular access control.
AI Model Integration: Improve the integration with the facial recognition AI, possibly by refining the AI model and providing user-specific results.

This backend enables a secure and functional environment for Fennoscandia Studios' users, managing their data with encryption and hashing, while offering seamless interaction with the AI-based facial recognition system.

